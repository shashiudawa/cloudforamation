- hosts: localhost
  gather_facts: no
  vars_files:
    - "{{ vars_files }}"
  tasks:
    - name: "Remove each EC2 instance from the ELB"
      ec2_elb:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        state: absent
        ec2_elbs: "{{ item.elb }}"
        region: "{{ ec2_elb.region }}"
        instance_id: "{{ item.instance }}"
      with_items: "{{ loadbalancers }}"
      ignore_errors: true
    
- name: Get instances info
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Stack: "{{ stack.tag }}"
      register: ec2_facts
    - debug:
        var: ec2_facts.instances[0].instance_id
 
    - name: Create the snapshot on secondray volume of each ec2 instance
      ec2_snapshot:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        instance_id: "{{ item.instance_id }}"
        device_name: "{{ ec2_snapshot.device_name }}"
        description: "snapshot of {{ item.tags.Name }}_{{ ec2_snapshot.patch_cycle }}"
        snapshot_tags:
          Name: "{{ item.tags.Name }}_{{ ec2_snapshot.patch_cycle }}"
      with_items: "{{ ec2_facts.instances }}"
     # ignore_errors: yes

    - name: Gather snapshot facts
      ec2_snapshot_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Name: "{{ ec2_snapshot.tag }}_{{ ec2_snapshot.patch_cycle }}"
      register: ec2_snapshot
    - debug:
        var: ec2_snapshot
    
    - name: Registering snapshots ids 
      set_fact:
        snapshot_map: "{{ ec2_snapshot | json_query('snapshots[*].{Snapshot: snapshot_id, Name: tags.Name}') }}"
        #snapshot_map: "{{ ec2_snapshot | json_query('snapshots[0].snapshot_id') }}"
        cacheable: yes
      register: snapshot_map
    - debug: 
        var: snapshot_map
    - name: copy content
      copy:
        content: "{{ snapshot_map }}"
        dest: "/tmp/my_file"

         
