- hosts: localhost
  gather_facts: no
  vars_files:
    - "{{ vars_files }}"
  tasks:
    - name: Gather existing EC2 instances info
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Stack: "{{ stack.tag }}"
      register: ec2_facts
    - debug:
        msg: "{{ ec2_facts | json_query('instances[*].{instance: instance_id, Name: tags.Name}') }}"

    - name: Remove each EC2 instance from the ELB
      ec2_elb:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        state: absent
        ec2_elbs: "{{ ec2_elb.elb }}"
        region: "{{ ec2_elb.region }}"
        instance_id: "{{ item.instance_id }}"
      with_items: "{{ ec2_facts.instances }}"

    - name: Create the snapshot on secondray volume of each ec2 instance
      ec2_snapshot:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        instance_id: "{{ item.instance_id }}"
        device_name: "{{ ec2_snapshot.device_name }}"
        description: "snapshot of {{ item.tags.Name }}_{{ ec2_snapshot.patch_cycle }}"
        snapshot_tags:
          Name: "{{ item.tags.Name }}_{{ ec2_snapshot.patch_cycle }}"
      with_items: "{{ ec2_facts.instances }}"
        
    - name: Gather snapshot facts
      ec2_snapshot_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Name: "{{ ec2_snapshot.tag }}_{{ ec2_snapshot.patch_cycle }}"
      register: ec2_snapshot
    - debug:
        var: ec2_snapshot

    - name: Registering snapshots ids
      set_fact:
        snapshot_map: "{{ ec2_snapshot | json_query('snapshots[*].{Snapshot: snapshot_id, Name: tags.Name}') }}"
        cacheable: yes
      register: snapshot_map
    - debug:
        var: snapshot_map

    - name: Create file with snapshot details
      copy:
        content: "{{ snapshot_map }}"
        dest: "/tmp/my_file"

- hosts: all
  gather_facts: no
  vars_files:
    - "{{ vars_files }}"
    - "{{ templates_path }}"
  tasks:
    - name: "Delete the exiting {{ stack.name }} stack"
      cloudformation:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ stack.region }}"
        stack_name: "{{ stack.name }}"
        state: "absent"

    - name: "Create the new {{ stack.name }} stack"
      cloudformation:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        stack_name: "{{ stack.name }}"
        state: "present"
        region: "{{ stack.region }}"
        disable_rollback: true
        template: "{{ templates_path }}/{{ env }}/{{ service }}/{{ service }}.json"
        template_parameters: "{{ lookup('file', '{{ templates_path }}/{{ env }}/{{ service }}/{{ service}}_parameters.json') | from_json }}"
        tags:
          Stack: "{{ stack.tag }}"

- hosts: localhost
  gather_facts: no
  vars_files:
    - "{{ vars_files }}"
  tasks:
    - name: Gather new EC2 instances info
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Stack: "{{ stack.tag }}"
          instance-state-name: running
      register: ec2_facts
    - debug:
        msg: "{{ ec2_facts | json_query('instances[*].{instance: instance_id, Name: tags.Name}') }}"

    - name: Add each EC2 instance to the ELB
      ec2_elb:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        state: present
        ec2_elbs: "{{ ec2_elb.elb }}"
        region: "{{ ec2_elb.region }}"
        instance_id: "{{ item.instance_id }}"
      with_items: "{{ ec2_facts.instances }}"
...
