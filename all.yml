- hosts: localhost
  gather_facts: no
  vars_files:
    - "{{ vars_files }}"
  tasks:
    - name: "Remove each EC2 instance from the ELB"
      ec2_elb:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        state: absent
        ec2_elbs: "{{ item.elb }}"
        region: "{{ ec2_elb.region }}"
        instance_id: "{{ item.instance }}"
      with_items: "{{ loadbalancers }}"
      ignore_errors: true
      #  - { elb: 'elb1', instances: 'instance1', 'instance2' }
      #  - { elb: 'elb2', instances: 'instance1', 'instance2' }
    - name: Get instances info
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Stack: "{{ stack.tag }}"
      register: ec2_facts
    - debug:
        var: ec2_facts.instances[0].instance_id
 
#    - name: Create the snapshot on secondray volume of each ec2 instance
#      ec2_snapshot:
#        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
#        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
#        ec2_region: "{{ AWS_REGION }}"
#        instance_id: "{{ item.instance_id }}"
#        device_name: "{{ ec2_snapshot.device_name }}"
#        description: "snapshot of {{ item.tags.Name }}_{{ ec2_snapshot.patch_cycle }}"
#        snapshot_tags:
#          Name: "{{ item.tags.Name }}_{{ ec2_snapshot.patch_cycle }}"
#      with_items: "{{ ec2_facts.instances }}"
#      ignore_errors: yes

    - name: Gather snapshot facts
      ec2_snapshot_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        filters:
          tag:Name: "{{ ec2_snapshot.tag }}_{{ ec2_snapshot.patch_cycle }}"
      register: ec2_snapshot
    - debug:
        var: ec2_snapshot
    
    - name: Registering snapshots ids 
      set_fact:
        #snapshot_map: "{{ ec2_snapshot | json_query('snapshots[*].{Snapshot: snapshot_id, Name: tags.Name}') }}"
        snapshot_map: "{{ ec2_snapshot | json_query('snapshots[*].snapshot_id') }}"
        #snapshot_map: "{{ ec2_snapshot.Name | to_nice_yaml }}"
      #loop: "{{ lookup('dict', snapshot_id) }}"
        cacheable: yes
      register: snapshot_map
    - debug: 
        var: snapshot_map
#    - set_fact: snap={{ snapshot_map.stdout }}
#    - debug:
#        var: snap
#    - name: snap
#      set_fact:
#        snapshotids: "{{ snapshot_map.stdout }}"
#      register: snapshot_id
#    - debug:
#        var: snapshot_id
 #   - name: paka 
 #     set_fact: 
  #      snapshotid1:
    #- debug:
     #   var: ec2_snapshot

- hosts: all
  gather_facts: no
  vars_files:
    - "{{ vars_files }}"
  tasks:
    - name: delete a stack
      cloudformation:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ stack.region }}"
        stack_name: "{{ stack.name }}"
        state: "absent"

    - name: Create a cloudformation stack
      cloudformation:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        stack_name: "{{ stack.name }}"
        state: "present"
        region: "{{ stack.region }}"
        disable_rollback: true
        template: "/home/ansible/cloudformation/templates/{{ enviornment }}/{{ service }}/{{ service }}.json"
        template_parameters: "{{ lookup('file', '/home/ansible/cloudformation/templates/{{ enviornment }}/{{ service }}/{{ service}}_parameters.json') | from_json }}"
          #KeyName: "{{ template.KeyName }}"
          #InstanceType: "{{ template.InstanceType }}"
          #ImageId: "{{ template.ImageId }}"
          #SnapshotId[*]: "{{ template.SnapshotId }}"
         # SnapshotId2: "{{ template.SnapshotId2 }}"
         # SnapshotId2: "{{ template.SnapshotId2 }}"
        #with_items: "{{ SnapshotIds }"
         #                 tags:
         #                           Stack: "{{ stack.tag }}"
         #
